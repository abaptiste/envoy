syntax = "proto3";

package envoy.extensions.filters.udp.dns_filter.v3alpha;

import "envoy/config/core/v3/base.proto";
import "envoy/data/dns/v3/dns_table.proto";

import "google/protobuf/duration.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3alpha";
option java_outer_classname = "DnsFilterProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).work_in_progress = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: DNS Filter]
// DNS Filter :ref:`configuration overview <config_udp_listener_filters_dns_filter>`.
// [#extension: envoy.filters.udp_listener.dns_filter]

// Configuration for the DNS filter.
message DnsFilterConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.udp.dns_filter.v2alpha.DnsFilterConfig";

  // This message contains the configuration for the DNS Filter operating
  // in a server context. This message will contain the virtual hosts and
  // associated addresses with which Envoy will respond to queries
  message ServerContextConfig {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.filter.udp.dns_filter.v2alpha.DnsFilterConfig.ServerContextConfig";

    oneof config_source {
      option (validate.required) = true;

      // DNS Filter table configuration defined from the control plane
      data.dns.v3.DnsTable inline_dns_table = 1;

      // Seed the DNS Filter table configuration loaded from an external path.
      // This file is a JSON-encoded message that contains the DnsTable driving Envoy's
      // responses to DNS queries
      config.core.v3.DataSource external_dns_table = 2;
    }
  }

  // This message contains the configuration for the DNS Filter operating in a client
  // context. This message will contain the timeout, and forwarding settings for Envoy
  // to make DNS requests to external resolvers
  message ClientContextConfig {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.filter.udp.dns_filter.v2alpha.DnsFilterConfig.ClientContextConfig";

    // Sets the maximum time we will wait for the upstream query to complete. Envoy allows
    // 5s for the upstream resolution to complete, so the minimum value here, if specified,
    // should be 5s

    // TODO(abaptiste): There is a strange issue where this message cannot get parsed from the
    // configuration correctly if this message field starts at 1 instead of 2.
    google.protobuf.Duration resolver_timeout = 2 [(validate.rules).duration = {gt {}}];

    // Specify a list of DNS servers to which we can forward queries. If no entries are
    // provided, Envoy will use the system configured resolvers.
    repeated string upstream_resolvers = 3
        [(validate.rules).repeated = {items {string {min_len: 3}}}];
  }

  // The prefix used when emitting DNS filter stats.
  string stat_prefix = 1 [(validate.rules).string = {min_len: 1}];

  // Server context configuration
  ServerContextConfig server_config = 2;

  // Client context configuration
  ClientContextConfig client_config = 3;
}
